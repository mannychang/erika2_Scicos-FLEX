// generated by Fast Light User Interface Designer (fluid) version 1.0108

#ifndef _SERIALPORT_H_
#define _SERIALPORT_H_

#pragma once
#include <string>
#include <windows.h>
#include <iostream>

#ifdef WIN32 
#endif

extern "C"{
#include "scicos/scicos_block4.h"
}

#ifdef RS232_LIB_EXPORTS
#define RS232_LIB_API	__declspec(dllexport) 
#else
#define RS232_LIB_API	__declspec(dllimport) 
#endif

/*** Definitions ***/
#define SCICOS_BLOCK_INIT          (4) /* Initialization part */
#define SCICOS_BLOCK_END           (5) /* End part */
#define SCICOS_BLOCK_OUTPUT_UPDATE (1) /* Output block update (used also to read input) */

/* This macro should be used to read block inputs 
 * i: is the index to select the line
 * j: is the index to select the element of the i-th line 
 */
#define u(i,j)  ((unsigned char*)block->inptr[i])[j]   

/* This macro should be used to write block outputs 
 * i: is the index to select the line
 * j: is the index to select the element of the i-th line 
 */
#define y(i,j)  ((unsigned char*)block->outptr[i])[j]

/* This macro should be used to read integer-type parameters */
#define ipar(i) (block->ipar[i])

/* This macro should be used to read integer-type parameters */
#define rpar(i) (block->rpar[i])

/* Size of a packet */
#define MAX_CHANNELS 15 /* 15 float, 60 bytes */

/*** Global variables ***/
extern FILE* fuscrs;                        /* File to be used for debug purpose */


#define READ_INTERVAL_TIMEOUT					MAXDWORD			
#define READ_TOTAL_TIMEOUT_MULTIPLIER			0			
#define READ_TOTAL_TIMEOUT_CONSTANT				0			
#define WRITE_TOTAL_TIMEOUT_MULTIPLIER			2			
#define WRITE_TOTAL_TIMEOUT_CONSTANT			0	

#define SERIAL_MAX_RX_BUF	16
#define SERIAL_MAX_TX_BUF	512

extern volatile int rs232_port_is_initialized;
extern volatile int rs232_config_file_is_opened;
#define myfprintf if(rs232_config_file_is_opened)fprintf

typedef enum{ParityNone, ParityOdd, ParityEven} ParityType;
typedef enum{FlowNone, FlowHardware, FlowXonXoff} FlowType;

class SerialPort
{
	HANDLE handle;
public:
	SerialPort();
	~SerialPort();
	bool open(const char *comname, ParityType parity=ParityNone, 
		FlowType flow=FlowNone, long int baudrate=57600,
		char databits=8, char stopbit=1, DWORD RxBufferSize=SERIAL_MAX_RX_BUF);
	bool is_open(){return handle != INVALID_HANDLE_VALUE;}
	int read(unsigned char *buf, int len);
	int write(unsigned char *buf, int len);
	void purge();
	bool setReadTimeOut(int ms);
	bool close();
};

extern SerialPort sci;

#endif
