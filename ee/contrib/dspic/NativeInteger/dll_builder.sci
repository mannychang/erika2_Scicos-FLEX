function libn = dll_builder(names, files, libs, flag, makename, loadername, libname, ldflags, cflags, fflags, cc)
// Copyright Enpc 
// Generate a shared library which can be used by link 
// command. 
// names = names of entry points or the name of the library to 
// be built (when flag == 'g') 
// files = object files to be built 
// flag = 'c' or 'f' or '
// 

//** assume some default values depending the argument list 
  [lhs,rhs] = argn(0);
  info = 1
  if rhs <= 4 then makename = 'Makelib';end
  if rhs <= 5 then loadername = 'loader.sce';end
  if rhs <= 6 then libname = ""; end
  if rhs <= 7 then ldflags = ""; end 
  if rhs <= 8 then cflags  = ""; end 
  if rhs <= 9 then fflags  = ""; end 
  if rhs <= 10 then cc  = ""; end 
  
  //** Generate a loader file
  if info==1 then write(%io(2),'   generate a loader file');end
  //** This function is included in this file   
  dll_link_gen_loader(names,flag,loadername,libs,libname);
  //** ... done 

  //** Generate a Makefile
  if info==1 then write(%io(2),'   generate a Makefile: [Makelib.mak]');end
  dll_link_gen_Make(names,files,libs,makename,libname,ldflags,cflags,fflags,cc,flag);
  //** Done 
  
  //** Call make
  if info==1 then write(%io(2),'   running the makefile');end
  if libname=="" then libname = names(1);end
  libn=ilib_compile('lib'+libname,makename,files);
  if info==1 then disp('Shared library: Ready');end

endfunction
//**=======================================================================


function dll_link_gen_loader(names,flag,loadername,libs,libname)
//------------------------------------
  rhs=argn(2)
  if rhs <= 4 then libname = ""; end 
  if rhs <= 3 then libs=[]; end 
  if rhs <= 2 then loadername = 'loader.sce' ; end 
  comp_target = COMPILER;
  
  // suffix to be used for dll
  lib_suf='dll';
  
  //** Name of the shared library for the 
  if libname=="" then libname = names(1);end 
    
  fd=mopen(loadername,"w");
  mfprintf(fd,"// generated by [dll_builder]: Please do not edit this file \n");
  mfprintf(fd,"// ------------------------------------------------------\n");
  mfprintf(fd,"%s_path=get_absolute_file_path(''%s'');\n",libname,basename(loadername+'.x'));

//** This section is obsolete .......  
//  nl=size(libs,'*') 
//  for i=1:nl 
//    if part(libs(i),1)=='/' then
//      mfprintf(fd,"link(''%s.%s'');\n",libs(i),lib_suf);
//    else
//      [diri,basenamei,exti]=fileparts(libs(i));
//      if (diri == '') then
//        mfprintf(fd,"link(%s_path+''%s.%s'');\n",libname,libs(i),lib_suf);
//      else
//        mfprintf(fd,"link(''%s.%s'');\n",libs(i),lib_suf);
//      end
//    end
//  end 
//
  
//** Print the line that load the library and the ass. entry point
  //** first part
  mfprintf(fd,"link(%s_path+''lib%s.%s'',[",libname,libname,lib_suf);
  //** second part 
  names=names(:)';
  n = size(names,'*');
  for i=1:n
    	mfprintf(fd,"''%s''",names(i))
     if i <>n ; mfprintf(fd,","); else mfprintf(fd,"],");end
  end
  
  mfprintf(fd,"''%s'');\n",flag); //** add the otional flag
  
  mclose(fd); //** Close the output file 
endfunction
//**======================================================================================

function dll_link_gen_Make(names,files,libs,makename,libname,ldflags,cflags,fflags,cc,flag)
//------------------------------------
// generate a Makefile for gateway
  [lhs,rhs]=argn(0);
  if rhs <= 2 then libs = [];end
  if rhs <= 3 then makename = 'Makelib';end
  if rhs <= 4 then libname = "";end
  if rhs <= 5 then ldflags = ""; end 
  if rhs <= 6 then cflags  = ""; end 
  if rhs <= 7 then fflags  = ""; end 
  if rhs <= 8 then cc  = ""; end 
  if rhs <= 9 then flag  = "c"; end 
  comp_target = COMPILER;
  
  Makename = makename+".mak'; //** for Windows systems
  dll_link_gen_Make_win32(names,files,libs,Makename,libname,ldflags,cflags,fflags,cc)

endfunction

//**===================================================================================

function dll_link_gen_Make_win32(names,files,libs,Makename,libname,ldflags,cflags,fflags,cc)
				  
  if libname=="" then libname = names(1);end 
  fd=mopen(Makename,"w");
  mfprintf(fd,"# generated by [dll_builder] : Please do not edit this file \n");
  mfprintf(fd,"# ------------------------------------------------------\n");
  mfprintf(fd,"SCIDIR =%s\n",SCI);
  mfprintf(fd,"SCIDIR1 =%s\n",pathconvert(SCI,%f,%f,'w'));
  mfprintf(fd,"# name of the dll to be built\n"); 
  mfprintf(fd,"LIBRARY = lib%s\n",libname);
  mfprintf(fd,"# list of objects file\n");
  mfprintf(fd,"OBJS =");
  for x=files(:)' ; mfprintf(fd," %s",strsubst(x,".o",".obj"));end
  
  if libs=="" then
    mfprintf(fd,"\n# No added libraries \n");
  else
    mfprintf(fd,"\n# added libraries \n");
    mfprintf(fd,"OTHERLIBS = ");
    for x=libs(:)' ; mfprintf(fd," ""%s.ilib"" ",x);end
    mfprintf(fd,"\n");
  end

  mfprintf(fd,"!include $(SCIDIR1)\\Makefile.incl.mak\n");
  if cc<>"" then 
    mfprintf(fd,"CC="+cc+ "\n");
  end
  mfprintf(fd,"CFLAGS = $(CC_OPTIONS) -DFORDLL -I\""$(SCIDIR)/routines\"""+...
	   " -Dmexfunction_=mex$*_  -DmexFunction=mex_$* "+ cflags +" \n"); 
  mfprintf(fd,"FFLAGS = $(FC_OPTIONS) -DFORDLL -I\""$(SCIDIR)/routines\"""+...
	   " -Dmexfunction=mex$* "+ fflags +"\n"); 
  mfprintf(fd,"EXTRA_LDFLAGS = "+ ldflags+"\n");
  mfprintf(fd,"!include $(SCIDIR1)\\config\\Makedll.incl \n");
  mclose(fd);
  
endfunction
//**=======================================================================================
